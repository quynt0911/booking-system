version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: consultation_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - consultation_network
    # Thêm health check để đảm bảo DB sẵn sàng
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d consultation_booking"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - consultation_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/sites-available:/etc/nginx/sites-available
    networks:
      - consultation_network

  user-service:
    build:
      context: ./services/user-service
    container_name: user-service
    environment:
      # Sửa để kết nối đúng với postgres container
      - USER_SERVICE_DSN=host=postgres user=postgres password=password123 dbname=consultation_booking port=5432 sslmode=disable
      - JWT_SECRET=your-secret
      - BOOKING_SERVICE_URL=http://booking-service:8082
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - consultation_network

  booking-service:
    build:
      context: ./services/booking-service
    container_name: booking-service
    environment:
      - BOOKING_SERVICE_DSN=host=postgres user=postgres password=password123 dbname=consultation_booking port=5432 sslmode=disable
      - JWT_SECRET=your-secret
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
      - PORT=8082
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      - consultation_network

  api-gateway:
    build:
      context: ./services/api-gateway
    container_name: api-gateway
    environment:
      - USER_SERVICE_URL=http://user-service:8080
      - BOOKING_SERVICE_URL=http://booking-service:8082
      - EXPERT_SERVICE_URL=http://expert-service:8083
      - JWT_SECRET=your-secret
    depends_on:
      - user-service
      - booking-service
      - expert-service
    ports:
      - "8081:8081"
    networks:
      - consultation_network

  expert-service:
    build:
      context: ./services/expert-service
    container_name: expert-service
    environment:
      - EXPERT_SERVICE_DSN=host=postgres user=postgres password=password123 dbname=consultation_booking port=5432 sslmode=disable
      - REDIS_URL=redis:6379
      - REDIS_PASSWORD=redis_password_123
      - PORT=8083
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8083:8083"
    networks:
      - consultation_network

  directus:
    image: directus/directus:11.8.0
    ports:
      - "8055:8055"
    environment:
      KEY: "a-very-secret-key"
      SECRET: "another-secret-key"
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_PASSWORD: "admin123"
      
      # Cấu hình database - sử dụng tên service thay vì host.docker.internal
      DB_CLIENT: "pg"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_DATABASE: "consultation_booking"
      DB_USER: "postgres"
      DB_PASSWORD: "password123"
      
      # Thêm một số cấu hình bổ sung
      PUBLIC_URL: "http://localhost:8055"
      CORS_ENABLED: "true"
      CORS_ORIGIN: "true"
      
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - consultation_network
    # Thêm restart policy
    restart: unless-stopped

  notification-service:
    build:
      context: ./services/notification-service
    container_name: notification-service
    environment:
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
      - PORT=8084
      - JWT_SECRET=your-secret
      - USER_SERVICE_URL=http://user-service:8080
      - BOOKING_SERVICE_URL=http://booking-service:8082
      - EXPERT_SERVICE_URL=http://expert-service:8083
    depends_on:
      redis:
        condition: service_started
      user-service:
        condition: service_started
      booking-service:
        condition: service_started
      expert-service:
        condition: service_started
    ports:
      - "8084:8084"
    networks:
      - consultation_network

  worker-service:
    build:
      context: ./services/worker-service
    container_name: worker-service
    environment:
      - REDIS_URL=redis://:redis_password_123@redis:6379/0
      - NOTIFICATION_SERVICE_URL=http://notification-service:8084
      - BOOKING_SERVICE_URL=http://booking-service:8082
      - EXPERT_SERVICE_URL=http://expert-service:8083
      - PORT=8085
    depends_on:
      redis:
        condition: service_started
      notification-service:
        condition: service_started
      booking-service:
        condition: service_started
      expert-service:
        condition: service_started
    ports:
      - "8085:8085"
    networks:
      - consultation_network

volumes:
  postgres_data:
  redis_data:

networks:
  consultation_network:
    driver: bridge